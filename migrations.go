// Code generated by go-bindata.
// sources:
// sql/20160227_init.sql
// sql/20160522_hashing.sql
// DO NOT EDIT!

package tokens

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql20160227_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x4b\xc3\x40\x10\x40\xcf\x9d\x5f\x31\xc7\x06\xed\x49\xe9\xa5\xa7\x6d\xbb\x60\x71\x93\x0d\xeb\x54\xac\x22\x21\x24\x13\x59\xf2\xb1\x61\x77\xd5\xbf\xef\x49\xd9\x80\xf4\x3a\xef\xcd\x0c\xbc\xcd\x06\x6f\x46\xfb\xe1\xeb\xc8\x78\x9e\xe1\x60\xa4\x20\x89\x24\xf6\x4a\x62\x74\x3d\x4f\x01\xd7\xb0\xb2\x2d\x3e\x0b\x73\x78\x10\x66\xbd\xbd\xcf\xb0\x34\xa7\x5c\x98\x0b\x3e\xca\xcb\x2d\xac\x1a\xcf\x75\xe4\xb6\xaa\x23\xd2\x29\x97\x4f\x24\xf2\x92\x5e\xb1\xd0\x84\xc5\x59\xa9\xc4\xe8\xbc\x1b\x91\xe4\x0b\xa5\x70\xf6\xae\xb3\x03\x57\xc9\x8f\xbb\x6d\xb6\x58\x1f\x2c\x4f\xf1\x8a\xe0\xf9\xcb\xf5\xdc\xe2\x5e\x6b\x25\x45\x91\xa2\xcf\xf0\xff\x3c\x34\x6e\xe6\xf0\x7b\xf0\xed\xfd\x8f\x41\xb6\x03\x48\xab\x1c\xdd\xf7\x04\x47\xa3\xcb\x45\x95\x1d\xfc\x04\x00\x00\xff\xff\xae\xb8\x81\x7c\x3a\x01\x00\x00")

func sql20160227_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20160227_initSql,
		"sql/20160227_init.sql",
	)
}

func sql20160227_initSql() (*asset, error) {
	bytes, err := sql20160227_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20160227_init.sql", size: 314, mode: os.FileMode(420), modTime: time.Unix(1473736503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql20160522_hashingSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xcd\x4e\x03\x21\x14\x46\xd7\xe5\x29\xbe\x5d\xdb\x38\x4d\x5c\x18\x37\x5d\x61\xa1\x91\x04\x19\x65\xc0\xb8\x6b\x58\x10\x4b\xac\x8c\x0e\x8c\xbe\xbe\x19\xff\xe6\x47\x8d\x49\xf7\xe7\xdc\x7b\xee\x5d\xad\x70\xf2\x18\xee\x1b\x97\x3d\xec\x13\xa1\xd2\x70\x0d\x43\x2f\x24\x47\xae\x1f\x7c\x4c\xa0\x8c\x61\x53\x4a\x7b\xa5\xb0\x77\x69\x8f\x5b\xaa\x37\x97\x54\x2f\xce\xcf\x96\x50\xa5\x81\xb2\x52\x82\xf1\x2d\xb5\xd2\x60\x3e\x2f\xc8\x6c\x06\x4c\xad\x5d\x72\x87\x7c\xa4\x1a\xb2\x6f\x5c\x0e\x75\x4c\x10\xca\xfc\x14\x4f\x47\x9e\xaa\x8c\xa6\x1d\xd7\xc6\xf0\xdc\xfa\xdd\x8b\x3b\xb4\x1e\x56\x89\x1b\xcb\x17\xdd\xbc\xa2\x0f\x2a\xa6\x0b\x96\x6b\x42\x86\x1f\x61\xf5\x6b\xfc\xed\x27\x4c\x97\xd7\x5f\x8d\x62\x0b\x7e\x27\x2a\x53\xbd\x0f\xfb\x6c\xf9\x1b\xf8\x58\xfc\x2f\xd5\x37\x8d\xd9\xef\xf3\x7a\x7e\x78\xe8\x9a\xbc\x05\x00\x00\xff\xff\x49\xe6\xdd\xad\xd1\x01\x00\x00")

func sql20160522_hashingSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20160522_hashingSql,
		"sql/20160522_hashing.sql",
	)
}

func sql20160522_hashingSql() (*asset, error) {
	bytes, err := sql20160522_hashingSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20160522_hashing.sql", size: 465, mode: os.FileMode(420), modTime: time.Unix(1473736725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/20160227_init.sql": sql20160227_initSql,
	"sql/20160522_hashing.sql": sql20160522_hashingSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"20160227_init.sql": &bintree{sql20160227_initSql, map[string]*bintree{}},
		"20160522_hashing.sql": &bintree{sql20160522_hashingSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

